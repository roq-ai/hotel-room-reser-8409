generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model hotel {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?       @db.VarChar(255)
  location        String?       @db.VarChar(255)
  total_rooms     Int?
  available_rooms Int?
  name            String        @db.VarChar(255)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user_id         String        @db.Uuid
  tenant_id       String        @db.VarChar(255)
  user            user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservation     reservation[]
  room            room[]
  service         service[]
}

model reservation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date  DateTime @db.Timestamp(6)
  end_date    DateTime @db.Timestamp(6)
  room_number Int
  guest_count Int
  status      String   @db.VarChar(255)
  user_id     String   @db.Uuid
  hotel_id    String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  hotel       hotel    @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model room {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  room_number     Int
  room_type       String   @db.VarChar(255)
  bed_count       Int
  price_per_night Int
  is_available    Boolean
  hotel_id        String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  hotel           hotel    @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_name        String   @db.VarChar(255)
  service_description String?  @db.VarChar(255)
  service_price       Int
  is_available        Boolean
  hotel_id            String   @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  hotel               hotel    @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  hotel       hotel[]
  reservation reservation[]
}
